{"version":3,"file":"static/js/739.ef347cba.chunk.js","mappings":"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","sources":["Dashboard/views/dashboard/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  CAvatar,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from \"@coreui/react\";\r\nimport { CChartLine } from \"@coreui/react-chartjs\";\r\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport {\r\n  cilCloudDownload,\r\n} from \"@coreui/icons\";\r\n\r\n\r\nimport WidgetsDropdown from \"../widgets/WidgetsDropdown\";\r\nimport { getAllUserTypeFunc } from \"../../../services/Api\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst getToken = () => {\r\n  return localStorage.getItem(\"token\");\r\n};\r\n\r\nconst decodeToken = () => {\r\n  const token = getToken();\r\n  if (token) {\r\n    try {\r\n      const decodedToken = jwtDecode(token);\r\n      return decodedToken.role;\r\n    } catch (error) {\r\n      console.log(\"Error decoding token:\", error);\r\n    }\r\n  }\r\n  return null;\r\n};\r\nconst userRole = decodeToken();\r\nconsole.log(\"Decoded user role:\", userRole);\r\nconst Dashboard = () => {\r\n  const [userData, setUserData] = useState([]);\r\n\r\n  const [active, setActive] = useState();\r\n  const random = (min, max) =>\r\n    Math.floor(Math.random() * (max - min + 1) + min);\r\n  const userGet = async () => {\r\n    const user = await getAllUserTypeFunc();\r\n\r\n    if (user.status === 200) {\r\n      setUserData(user.data.data.user.reverse());\r\n    } else {\r\n      console.log(\"Error to get the user data\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    userGet();\r\n  }, []);\r\n  const convertDuration = (durationInMilliseconds) => {\r\n    const seconds = Math.floor(durationInMilliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const weeks = Math.floor(hours / 168);\r\n    const months = Math.floor(weeks / 4);\r\n    const years = Math.floor(months / 12);\r\n\r\n    return {\r\n      seconds: seconds % 60,\r\n      minutes: minutes % 60,\r\n      hours: hours % 24,\r\n      weeks,\r\n      months,\r\n      years,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <WidgetsDropdown />\r\n      <CCard className=\"mb-4\">\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol sm={5}>\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Traffic\r\n              </h4>\r\n              <div className=\"small text-medium-emphasis\">\r\n                January - July 2021\r\n              </div>\r\n            </CCol>\r\n            <CCol sm={7} className=\"d-none d-md-block\">\r\n              <CButton color=\"primary\" className=\"float-end\">\r\n                <CIcon icon={cilCloudDownload} />\r\n              </CButton>\r\n              <CButtonGroup className=\"float-end me-3\">\r\n                {[\"Day\", \"Month\", \"Year\"].map((value) => (\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    key={value}\r\n                    className=\"mx-0\"\r\n                    active={value === \"Month\"}\r\n                  >\r\n                    {value}\r\n                  </CButton>\r\n                ))}\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n          <CChartLine\r\n            style={{ height: \"300px\", marginTop: \"40px\" }}\r\n            data={{\r\n              labels: [\r\n                \"January\",\r\n                \"February\",\r\n                \"March\",\r\n                \"April\",\r\n                \"May\",\r\n                \"June\",\r\n                \"July\",\r\n              ],\r\n              datasets: [\r\n                {\r\n                  label: \"My First dataset\",\r\n                  backgroundColor: hexToRgba(getStyle(\"--cui-info\"), 10),\r\n                  borderColor: getStyle(\"--cui-info\"),\r\n                  pointHoverBackgroundColor: getStyle(\"--cui-info\"),\r\n                  borderWidth: 2,\r\n                  data: [\r\n                    random(50, 100),\r\n                    random(50, 100),\r\n                    random(50, 100),\r\n                    random(50, 100),\r\n                    random(50, 100),\r\n                    random(50, 100),\r\n                    random(50, 100),\r\n                  ],\r\n                  fill: true,\r\n                },\r\n                {\r\n                  label: \"My Second dataset\",\r\n                  backgroundColor: \"transparent\",\r\n                  borderColor: getStyle(\"--cui-success\"),\r\n                  pointHoverBackgroundColor: getStyle(\"--cui-success\"),\r\n                  borderWidth: 2,\r\n                  data: [\r\n                    random(50, 200),\r\n                    random(50, 200),\r\n                    random(50, 200),\r\n                    random(50, 200),\r\n                    random(50, 200),\r\n                    random(50, 200),\r\n                    random(50, 200),\r\n                  ],\r\n                },\r\n                {\r\n                  label: \"My Third dataset\",\r\n                  backgroundColor: \"transparent\",\r\n                  borderColor: getStyle(\"--cui-danger\"),\r\n                  pointHoverBackgroundColor: getStyle(\"--cui-danger\"),\r\n                  borderWidth: 1,\r\n                  borderDash: [8, 5],\r\n                  data: [65, 65, 65, 65, 65, 65, 65],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  display: false,\r\n                },\r\n              },\r\n              scales: {\r\n                x: {\r\n                  grid: {\r\n                    drawOnChartArea: false,\r\n                  },\r\n                },\r\n                y: {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                    maxTicksLimit: 5,\r\n                    stepSize: Math.ceil(250 / 5),\r\n                    max: 250,\r\n                  },\r\n                },\r\n              },\r\n              elements: {\r\n                line: {\r\n                  tension: 0.4,\r\n                },\r\n                point: {\r\n                  radius: 0,\r\n                  hitRadius: 10,\r\n                  hoverRadius: 4,\r\n                  hoverBorderWidth: 3,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CRow>\r\n        <CCol xs>\r\n          <CCard className=\"mb-4\">\r\n            <CCardBody>\r\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\r\n                <CTableHead color=\"light\">\r\n                  <CTableRow>\r\n                    <CTableHeaderCell className=\"text-center\">\r\n                      <CIcon />\r\n                      Status\r\n                    </CTableHeaderCell>\r\n                    <CTableHeaderCell>User</CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"text-center\">\r\n                      Address\r\n                    </CTableHeaderCell>\r\n                    <CTableHeaderCell>Role</CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"text-center\">\r\n                      Phone Number\r\n                    </CTableHeaderCell>\r\n                    <CTableHeaderCell>Activity</CTableHeaderCell>\r\n                  </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                  {Array.isArray(userData) ? (\r\n                    userData.map((item, index) => (\r\n                      <CTableRow key={index}>\r\n                        <CTableDataCell className=\"text-center\">\r\n                          <CAvatar\r\n                            size=\"md\"\r\n                            status={\r\n                              item.isActive\r\n                                ? \"avatar-status bg-success\"\r\n                                : \"avatar-status bg-danger\"\r\n                            }\r\n                          >\r\n                            {item.isActive ? (\r\n                              <p className=\"sr-only m-0\">Active</p>\r\n                            ) : (\r\n                              <p className=\"sr-only m-0\">Inactive</p>\r\n                            )}\r\n                          </CAvatar>\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <div>{item.full_name}</div>\r\n                          <div className=\"small text-medium-emphasis\">\r\n                            <span>{item.new ? \"New\" : \"Recurring\"}</span> |\r\n                            Registered: {item.isActive}\r\n                          </div>\r\n                        </CTableDataCell>\r\n                        <CTableDataCell className=\"text-center\">\r\n                          {/* <CIcon size=\"xl\" icon={item.country} title={item.store_name} /> */}\r\n                          {item.address}\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <div className=\"clearfix\">\r\n                            <div className=\"float-start\">\r\n                              {/* <strong>{item.usage.value}%</strong> */}\r\n                              {item.role}\r\n                            </div>\r\n                            <div className=\"float-end\">\r\n                              {/* <small className=\"text-medium-emphasis\">{item.usage.period}</small> */}\r\n                            </div>\r\n                          </div>\r\n                          {/* <CProgress thin color={item.usage.color} value={item.usage.value} /> */}\r\n                        </CTableDataCell>\r\n                        <CTableDataCell className=\"text-center\">\r\n                          <> {item.phone_number.toString().padStart(11, \"0\")}</>\r\n                        </CTableDataCell>\r\n                        <CTableDataCell>\r\n                          <div className=\"small text-medium-emphasis\">\r\n                            Last login\r\n                          </div>\r\n                          <p>\r\n                            {convertDuration(\r\n                              new Date() - new Date(item.updated_at)\r\n                            ).years > 0 && (\r\n                                <>\r\n                                  {\r\n                                    convertDuration(\r\n                                      new Date() - new Date(item.updated_at)\r\n                                    ).years\r\n                                  }{\" \"}\r\n                                  years,{\" \"}\r\n                                </>\r\n                              )}\r\n                            {convertDuration(\r\n                              new Date() - new Date(item.updated_at)\r\n                            ).months > 0 && (\r\n                                <>\r\n                                  {\r\n                                    convertDuration(\r\n                                      new Date() - new Date(item.updated_at)\r\n                                    ).months\r\n                                  }{\" \"}\r\n                                  months,{\" \"}\r\n                                </>\r\n                              )}\r\n                            {convertDuration(\r\n                              new Date() - new Date(item.updated_at)\r\n                            ).weeks > 0 && (\r\n                                <>\r\n                                  {\r\n                                    convertDuration(\r\n                                      new Date() - new Date(item.updated_at)\r\n                                    ).weeks\r\n                                  }{\" \"}\r\n                                  weeks,{\" \"}\r\n                                </>\r\n                              )}\r\n                            {convertDuration(\r\n                              new Date() - new Date(item.updated_at)\r\n                            ).hours > 0 && (\r\n                                <>\r\n                                  {\r\n                                    convertDuration(\r\n                                      new Date() - new Date(item.updated_at)\r\n                                    ).hours\r\n                                  }{\" \"}\r\n                                  hours,{\" \"}\r\n                                </>\r\n                              )}\r\n                            {convertDuration(\r\n                              new Date() - new Date(item.updated_at)\r\n                            ).minutes > 0 && (\r\n                                <>\r\n                                  {\r\n                                    convertDuration(\r\n                                      new Date() - new Date(item.updated_at)\r\n                                    ).minutes\r\n                                  }{\" \"}\r\n                                  minutes,{\" \"}\r\n                                </>\r\n                              )}\r\n                            {convertDuration(\r\n                              new Date(item.updated_at) -\r\n                              new Date(item.created_at)\r\n                            ).seconds > 0 && (\r\n                                <>\r\n                                  {\r\n                                    convertDuration(\r\n                                      new Date(item.updated_at) -\r\n                                      new Date(item.created_at)\r\n                                    ).seconds\r\n                                  }{\" \"}\r\n                                  seconds\r\n                                </>\r\n                              )}\r\n                          </p>\r\n                        </CTableDataCell>\r\n                      </CTableRow>\r\n                    ))\r\n                  ) : (\r\n                    <p>No user data available</p>\r\n                  )}\r\n                </CTableBody>\r\n              </CTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["userRole","token","localStorage","getItem","jwtDecode","role","error","console","log","decodeToken","_useState","useState","_useState2","_slicedToArray","userData","setUserData","_useState3","_useState4","random","min","max","Math","floor","userGet","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","user","wrap","_context","prev","next","getAllUserTypeFunc","sent","status","data","reverse","stop","apply","arguments","useEffect","convertDuration","durationInMilliseconds","seconds","minutes","hours","weeks","months","years","_jsxs","_Fragment","children","_jsx","WidgetsDropdown","CCard","className","CCardBody","CRow","CCol","sm","id","CButton","color","CIcon","icon","cilCloudDownload","CButtonGroup","map","value","active","CChartLine","style","height","marginTop","labels","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","fill","borderDash","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","xs","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","Array","isArray","item","index","CTableDataCell","CAvatar","size","isActive","full_name","new","address","phone_number","toString","padStart","Date","updated_at","created_at"],"sourceRoot":""}